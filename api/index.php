<?phpheader('Content-Type: application/json');header('Access-Control-Allow-Origin: *');header("Access-Control-Allow-Methods: HEAD, GET, POST, PUT, PATCH, DELETE, OPTIONS");header("Access-Control-Allow-Headers: title, data, X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method,Access-Control-Request-Headers, Authorization");include_once 'crud/TaskCRUD.php';include_once 'config/Database.php';const API_URI = '/tasks';const TITLE_KEY = 'HTTP_TITLE';const DATA_KEY = 'HTTP_DATA';$method = $_SERVER['REQUEST_METHOD'];$uri = $_SERVER['REQUEST_URI'];$split = split('/', $uri);if(apiRequest($uri) && $method === 'GET') {    if (count($split) == 2) {//read {id}        http_response_code(TaskCRUD::read((int) $split[1]));    } else if (count($split) == 1) {//read all        http_response_code(TaskCRUD::readAll());    } else {        http_response_code(404);    }} else if(apiRequest($uri) && $method === 'POST') {    if (count($split) == 1 && isset($_SERVER[TITLE_KEY]) && isset($_SERVER[DATA_KEY])) {//create        http_response_code(TaskCRUD::create($_SERVER[TITLE_KEY], $_SERVER[DATA_KEY]));    } else {        http_response_code(400);    }} else if(apiRequest($uri) && $method === 'DELETE') {    if (count($split) == 2) {//delete {id}        http_response_code(TaskCRUD::delete((int) $split[1]));    } else {        http_response_code(400);    }} else if(apiRequest($uri) && $method === 'PUT') {    if (count($split) == 2 && isset($_SERVER[TITLE_KEY]) && isset($_SERVER[DATA_KEY])) {//update {id}        http_response_code(TaskCRUD::update((int) $split[1], $_SERVER[TITLE_KEY], $_SERVER[DATA_KEY]));    } else {        http_response_code(200);    }} else if(apiRequest($uri) && $method === 'OPTIONS') {    http_response_code(200);} else if(apiRequest($uri)) {    http_response_code(405);} else {    http_response_code(404);}function split($separator, $string): array {    $arr = explode($separator, $string);    $res = [];    foreach ($arr as $element) {        if (trim($element) != '') {            array_push($res, $element);        }    }    return $res;}function startsWith(string $haystack, string $needle): bool {    return substr($haystack, 0, strlen($needle)) === $needle;}function apiRequest(string $uri): bool {    return startsWith($uri, API_URI);}